{"version":3,"sources":["components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","components/api/api.js","App.jsx","index.js"],"names":["TodoList","state","todos","props","selectedName","this","getUserId","handleSelected","handleInput","className","type","onChange","event","target","value","map","todo","classNames","completed","key","id","readOnly","title","onClick","userId","React","Component","CurrentUser","user","clearUser","name","email","phone","class","GET_API","a","fetch","responce","json","result","data","users","getTodosFromServer","filterTodosByUserId","filter","sort","curr","next","getUserIdFromServer","USER_ID","App","selectedUserId","searchTodo","inputText","filtredTodos","filteredByTitle","includes","toLowerCase","selected","then","setState","getUsersFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e8fcf0aa.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    todos: this.props.todos,\n    selectedName: '',\n  }\n\n\n\n  render() {\n    const { getUserId, handleSelected, handleInput, todos } = this.props;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <div>\n            <input\n              type=\"text\"\n              className=\"input\"\n              onChange={(event) => handleInput(event.target.value)}\n            />\n            <select\n              onChange={(event) => {\n                handleSelected(event.target.value);\n              }}\n            >\n              <option value=\"all\">All</option>\n              <option value=\"active\">Active</option>\n              <option value=\"completed\">Completed</option>\n            </select>\n          </div>\n          <ul className=\"TodoList__list\">\n          {\n            todos.map(todo => {\n              return (\n                <li\n                  className= {\n                    classNames (\n                      \"TodoList__item TodoList__item--checked\",\n                      {\"TodoList__item--unchecked\": !todo.completed}\n                    )}\n                  key={todo.id}\n                >\n                  <label>\n                    <input type=\"checkbox\" readOnly />\n                    <p>{todo.title}</p>\n                  </label>\n\n                  <button\n                    className=\"\n                    TodoList__user-button\n                    button\"\n                    type=\"button\"\n                    onClick={() => getUserId(todo.userId)}\n                  >\n                    {`User# ${todo.userId}`}\n                  </button>\n                </li>\n              )\n            })\n          }\n          </ul>\n        </div>\n      </div>\n    );\n  };\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    completed: PropTypes.bool.isRequired,\n    userId: PropTypes.number.isRequired,\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n  })).isRequired\n}\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\n\nexport const CurrentUser = ({ userId, user, clearUser }) => (\n  <div className=\"CurrentUser\">\n    <h2 className=\"CurrentUser__title\"><span>Selected user: {userId}</span></h2>\n    <h3 className=\"CurrentUser__name\">{user.name}</h3>\n    <p className=\"CurrentUser__email\">{user.email}</p>\n    <p className=\"CurrentUser__phone\">{user.phone}</p>\n    <button\n      class=\"CurrentUser__button button\"\n      onClick={() => clearUser()}\n    ><span>Clear</span></button>\n  </div>\n);\n\nCurrentUser.propTypes = {\n  user: PropTypes.object.isRequired,\n}","const GET_API = 'https://mate-api.herokuapp.com';\n\nexport async function getUsersFromServer() {\n  const responce = await (fetch(`${GET_API}/users/`));\n  const result = await responce.json();\n  const users = await result.data;\n\n  return users;\n}\n\nexport async function getTodosFromServer() {\n  const responce = await (fetch(`${GET_API}/todos/`));\n  const result = await responce.json();\n  const todos = await result.data;\n  const filterTodosByUserId = todos\n    .filter(todo => todo.userId !== null)\n    .sort((curr, next) => curr.userId - next.userId);\n\n  return filterTodosByUserId;\n}\n\nexport async function getUserIdFromServer(userId) {\n  const responce = await (fetch(`${GET_API}/users/${userId}`));\n  const result = await responce.json();\n  const USER_ID = await result.data;\n\n  return USER_ID;\n}\n\nexport async function getTodosByTitle(currentValue) {\n  const responce = await (fetch(`${GET_API}/todos/`));\n  const result = await responce.json();\n  const getData = await result.data;\n\n  return getData\n    .filter(data => data.title.includes(currentValue.toLowerCase()));\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport {\n  getUsersFromServer,\n  getTodosFromServer,\n  getUserIdFromServer\n} from './components/api/api.js';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    users: [],\n    user: [],\n    searchTodo: '',\n    inputText: '',\n  };\n\n  filtredTodos = () => {\n    const { todos, inputText } = this.state;\n    const filteredByTitle = todos.filter(todo => \n      todo.title.includes(inputText.toLowerCase()));\n  \n    if (!inputText) {\n      return todos;\n    }\n\n    return filteredByTitle;\n  }\n\n  handleSelected = (selected)  => {\n    switch (selected) {\n      case 'all': {\n        getTodosFromServer()\n        .then(todos =>\n          this.setState({todos: todos.filter(todo => todo)}));\n        break;\n      }\n\n      case 'completed': {\n        getTodosFromServer()\n        .then(todos =>\n          this.setState({todos: todos.filter(todo => todo.completed)}));\n        break;\n      }\n\n      case 'active': {\n        getTodosFromServer()\n        .then(todos =>\n          this.setState({todos: todos.filter(todo => !todo.completed)}));\n        break;\n      }\n      default:\n    }\n  }\n\n  getUserId = (userId) => {\n    const { selectedUserId } = this.state;\n\n    this.setState({selectedUserId: userId});\n    getUserIdFromServer(selectedUserId + 1)\n      .then(user =>  this.setState({user}));\n  }\n\n  clearUser = () => {\n    this.setState({\n      selectedUserId: 0,\n      user: [],\n    })\n    \n  }\n\n  componentDidMount() {\n    const { users } = this.state;\n\n    getTodosFromServer()\n      .then(todos => this.setState({todos}))\n\n    getUsersFromServer(users)\n      .then(users => this.setState({users}))\n  }\n\n  render() {\n    const { selectedUserId, user } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">        \n          <TodoList\n            todos={this.filtredTodos()}\n            getUserId={this.getUserId}\n            handleInput={(inputText) => this.setState({inputText})}\n            handleSelected={this.handleSelected}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                user={user}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}